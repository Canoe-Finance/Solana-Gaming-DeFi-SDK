<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solana.Unity.Rpc</name>
    </assembly>
    <members>
        <member name="T:Solana.Unity.Rpc.Builders.MessageBuilder">
            <summary>
            A compiled instruction within the message.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.MessageBuilder.BlockHashLength">
            <summary>
            The length of the block hash.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.MessageBuilder._messageHeader">
            <summary>
            The message header.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.MessageBuilder._accountKeysList">
            <summary>
            The account keys list.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Builders.MessageBuilder.Instructions">
            <summary>
            The list of instructions contained within this transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Builders.MessageBuilder.RecentBlockHash">
            <summary>
            The hash of a recent block.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Builders.MessageBuilder.NonceInformation">
            <summary>
            The nonce information to be used instead of the recent blockhash.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Builders.MessageBuilder.FeePayer">
            <summary>
            The transaction fee payer.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.MessageBuilder.#ctor">
            <summary>
            Initialize the message builder.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.MessageBuilder.AddInstruction(Solana.Unity.Rpc.Models.TransactionInstruction)">
            <summary>
            Add an instruction to the message.
            </summary>
            <param name="instruction">The instruction to add to the message.</param>
            <returns>The message builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.MessageBuilder.Build">
            <summary>
            Builds the message into the wire format.
            </summary>
            <returns>The encoded message.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.MessageBuilder.GetAccountKeys">
            <summary>
            Gets the keys for the accounts present in the message.
            </summary>
            <returns>The list of <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/>.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.MessageBuilder.FindAccountIndex(System.Collections.Generic.IList{Solana.Unity.Rpc.Models.AccountMeta},System.Byte[])">
            <summary>
            Finds the index of the given public key in the accounts list.
            </summary>
            <param name="accountMetas">The <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/>.</param>
            <param name="publicKey">The public key.</param>
            <returns>The index of the</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Builders.TransactionBuilder">
            <summary>
            Implements a builder for transactions.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.TransactionBuilder.SignatureLength">
            <summary>
            The length of a signature.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.TransactionBuilder._messageBuilder">
            <summary>
            The builder of the message contained within the transaction.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.TransactionBuilder._signatures">
            <summary>
            The signatures present in the message.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Builders.TransactionBuilder._serializedMessage">
            <summary>
            The message after being serialized.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.#ctor">
            <summary>
            Default constructor that initializes the transaction builder.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.Serialize">
            <summary>
            Serializes the message into a byte array.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.Sign(System.Collections.Generic.IList{Solana.Unity.Wallet.Account})">
            <summary>
            Sign the transaction message with each of the signer's keys.
            </summary>
            <param name="signers">The list of signers.</param>
            <exception cref="T:System.Exception">Throws exception when the list of signers is null or empty or when the fee payer hasn't been set.</exception>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.AddSignature(System.Byte[])">
            <summary>
            Adds a signature to the current transaction.
            </summary>
            <param name="signature">The signature.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.AddSignature(System.String)">
            <summary>
            Adds a signature to the current transaction.
            </summary>
            <param name="signature">The signature.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.SetRecentBlockHash(System.String)">
            <summary>
            Sets the recent block hash for the transaction.
            </summary>
            <param name="recentBlockHash">The recent block hash as a base58 encoded string.</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.SetNonceInformation(Solana.Unity.Rpc.Models.NonceInformation)">
            <summary>
            Sets the nonce information for the transaction.
            <remarks>Whenever this is set, it is used instead of the blockhash.</remarks>
            </summary>
            <param name="nonceInfo">The nonce information object to use.</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.SetFeePayer(Solana.Unity.Wallet.PublicKey)">
            <summary>
            Sets the fee payer for the transaction.
            </summary>
            <param name="account">The public key of the account that will pay the transaction fee</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.AddInstruction(Solana.Unity.Rpc.Models.TransactionInstruction)">
            <summary>
            Adds a new instruction to the transaction.
            </summary>
            <param name="instruction">The instruction to add.</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.CompileMessage">
            <summary>
            Compiles the transaction's message into wire format, ready to be signed.
            </summary>
            <returns>The serialized message.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.Build(Solana.Unity.Wallet.Account)">
            <summary>
            Signs the transaction's message with the passed signer and add it to the transaction, serializing it.
            </summary>
            <param name="signer">The signer.</param>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionBuilder.Build(System.Collections.Generic.IList{Solana.Unity.Wallet.Account})">
            <summary>
            Signs the transaction's message with the passed list of signers and adds them to the transaction, serializing it.
            </summary>
            <param name="signers">The list of signers.</param>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Builders.TransactionInstructionFactory">
            <summary>
            Methods to create instances of the TransactionInstruction for languages that do not support init-only setters
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Builders.TransactionInstructionFactory.Create(Solana.Unity.Wallet.PublicKey,System.Collections.Generic.IList{Solana.Unity.Rpc.Models.AccountMeta},System.Byte[])">
            <summary>
            Helper method to make TransactionInstruction objects available to outside Program implementations in 
            languages that do not currently support immutable init-only setters like VB.Net
            </summary>
            <param name="programId">The program ID associated with the instruction.</param>
            <param name="keys">The keys associated with the instruction.</param>
            <param name="data">The instruction-specific data.</param>
            <returns></returns>
        </member>
        <member name="T:Solana.Unity.Rpc.ClientFactory">
            <summary>
            Implements a client factory for Solana RPC and Streaming RPC APIs.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.RpcDevNet">
            <summary>
            The dev net cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.RpcTestNet">
            <summary>
            The test net cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.RpcMainNet">
            <summary>
            The main net cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.StreamingRpcDevNet">
            <summary>
            The dev net cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.StreamingRpcTestNet">
            <summary>
            The test net cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.ClientFactory.StreamingRpcMainNet">
            <summary>
            The main net cluster.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(Solana.Unity.Rpc.Cluster,System.Object)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(Solana.Unity.Rpc.Cluster)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(Solana.Unity.Rpc.Cluster,System.Object,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <param name="rateLimiter">An IRateLimiter instance or null.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(Solana.Unity.Rpc.Cluster,System.Object,System.Net.Http.HttpClient,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <param name="httpClient">A HttpClient instance. If null, a new instance will be created.</param>
            <param name="rateLimiter">An IRateLimiter instance or null.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(System.String,System.Object)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(System.String,System.Object,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <param name="rateLimiter">An IRateLimiter instance or null.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetClient(System.String,System.Object,System.Net.Http.HttpClient,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <param name="httpClient">A HttpClient instance. If null, a new instance will be created.</param>
            <param name="rateLimiter">An IRateLimiter instance or null.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetStreamingClient(Solana.Unity.Rpc.Cluster,System.Object)">
            <summary>
            Instantiate a streaming client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <returns>The streaming client.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.ClientFactory.GetStreamingClient(System.String,System.Object,System.Net.WebSockets.ClientWebSocket)">
            <summary>
            Instantiate a streaming client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <param name="clientWebSocket">A ClientWebSocket instance. If null, a new instance will be created.</param>
            <returns>The streaming client.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Cluster">
            <summary>
            Represents the public solana clusters.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Cluster.DevNet">
            <summary>
            Devnet serves as a playground for anyone who wants to take Solana for a test drive, as a user, token holder, app developer, or validator.
            </summary>
            <remarks>
            Application developers should target Devnet.
            Potential validators should first target Devnet.
            Key points:
             <list type="bullet">  
               <item>Devnet tokens are not real</item>
               <item>Devnet includes a token faucet for airdrops for application testing</item>
               <item>Devnet may be subject to ledger resets</item>
               <item>Devnet typically runs a newer software version than Mainnet Beta</item>
            </list>
            </remarks>
        </member>
        <member name="F:Solana.Unity.Rpc.Cluster.TestNet">
            <summary>
            Testnet is where Solana stress tests recent release features on a live cluster, particularly focused on network performance, stability and validator behavior.
            </summary>
            <remarks>
            Tour de SOL initiative runs on Testnet, where malicious behavior and attacks are encouraged on the network to help find and squash bugs or network vulnerabilities.
            Key points:
            <list type="bullet">
               <item>Devnet tokens are not real</item>
               <item>Devnet includes a token faucet for airdrops for application testing</item>
               <item>Devnet may be subject to ledger resets</item>
               <item>Testnet typically runs a newer software release than both Devnet and Mainnet Beta</item>
            </list>
            </remarks>
        </member>
        <member name="F:Solana.Unity.Rpc.Cluster.MainNet">
            <summary>
            A permissionless, persistent cluster for early token holders and launch partners. Currently, rewards and inflation are disabled.
            </summary>
            <remarks>
            Tokens that are issued on Mainnet Beta are real SOL.
            </remarks>
        </member>
        <member name="T:Solana.Unity.Rpc.Converters.AccountDataConverter">
            <inheritdoc/>
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.AccountDataConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Collections.Generic.List{System.String},Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.AccountDataConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Collections.Generic.List{System.String},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read an AccountDataConverter from json into its model representation.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
        </member>
        <member name="T:Solana.Unity.Rpc.Converters.EncodingConverter">
            <inheritdoc/>
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.EncodingConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Solana.Unity.Rpc.Types.BinaryEncoding,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Solana.Unity.Rpc.Converters.RpcErrorResponseConverter">
            <summary>
            Converts a TransactionError from json into its model representation.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.RpcErrorResponseConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Solana.Unity.Rpc.Messages.JsonRpcErrorResponse,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads and converts the JSON to type <c>JsonRpcErrorResponse</c>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType"> The type to convert.</param>
            <param name="existingValue">An existing values</param>
            <param name="hasExistingValue">If it has an existing values</param>
            <param name="serializer">The serializer</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.RpcErrorResponseConverter.WriteJson(Newtonsoft.Json.JsonWriter,Solana.Unity.Rpc.Messages.JsonRpcErrorResponse,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Not yet implemented
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Solana.Unity.Rpc.Converters.TransactionErrorJsonConverter">
            <summary>
            Converts a TransactionError from json into its model representation.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Converters.TransactionErrorJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Solana.Unity.Rpc.Models.TransactionError,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads and converts the JSON to type <c>TransactionError</c>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType"> The type to convert.</param>
            <param name="existingValue">An existing values</param>
            <param name="hasExistingValue">If it has an existing values</param>
            <param name="serializer">The serializer</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.KeyValue">
            <summary>
            Helper class that holds a key-value config pair that filters out null values.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.ConfigObject">
            <summary>
            Helper class to create configuration objects with key-value pairs that filters out null values.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.Parameters">
            <summary>
            Helper class that creates a List of parameters and filters out null values.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.IRequestResult">
            <summary>
            Interface used to tepresent the result of a given request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.WasSuccessful">
            <summary>
            Returns <c>true</c> if the request was successfully handled and parsed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.WasHttpRequestSuccessful">
            <summary>
            Returns <c>true</c> if the HTTP request was successful (e.g. Code 200).
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.WasRequestSuccessfullyHandled">
            <summary>
            Returns <c>true</c> if the request was successfully handled by the server and no error parameters are found in the result.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.Reason">
            <summary>
            Returns a string with the reason for the error if <see cref="P:Solana.Unity.Rpc.Core.Http.IRequestResult.WasSuccessful"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.HttpStatusCode">
            <summary>
            Returns the <see cref="P:Solana.Unity.Rpc.Core.Http.IRequestResult.HttpStatusCode"/> of the request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.ServerErrorCode">
            <summary>
            Returns the error code if one was found in the error object when the server is unable to handle the request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.ErrorData">
            <summary>
            The error data, if applicable.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.RawRpcRequest">
            <summary>
            Contains the JSON RPC request payload
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.IRequestResult.RawRpcResponse">
            <summary>
            Contains the JSON RPC response payload
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.JsonRpcClient">
            <summary>
            Base Rpc client class that abstracts the HttpClient handling.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Http.JsonRpcClient._serializerOptions">
            <summary>
            The Json serializer options to be reused between calls.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Http.JsonRpcClient._httpClient">
            <summary>
            The HttpClient.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Http.JsonRpcClient._logger">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Http.JsonRpcClient._rateLimiter">
            <summary>
            Rate limiting strategy
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.JsonRpcClient.NodeAddress">
            <inheritdoc cref="P:Solana.Unity.Rpc.IRpcClient.NodeAddress"/>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.#ctor(System.String,System.Object,System.Net.Http.HttpClient,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            The internal constructor that setups the client.
            </summary>
            <param name="url">The url of the RPC server.</param>
            <param name="logger">The possible logger instance.</param>
            <param name="httpClient">The possible HttpClient instance. If null, a new instance will be created.</param>
            <param name="rateLimiter">An IRateLimiter instance or null for no rate limiting.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.SendRequest``1(Solana.Unity.Rpc.Messages.JsonRpcRequest)">
            <summary>
            Sends a given message as a POST method and returns the deserialized message result based on the type parameter.
            </summary>
            <typeparam name="T">The type of the result to deserialize from json.</typeparam>
            <param name="req">The message request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.HandleResult``1(Solana.Unity.Rpc.Messages.JsonRpcRequest,System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles the result after sending a request.
            </summary>
            <typeparam name="T">The type of the result to deserialize from json.</typeparam>
            <param name="req">The original message request.</param>
            <param name="response">The response obtained from the request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.SendBatchRequestAsync(Solana.Unity.Rpc.Messages.JsonRpcBatchRequest)">
            <summary>
            Sends a batch of messages as a POST method and returns a collection of responses.
            </summary>
            <param name="reqs">The message request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.HandleBatchResult(Solana.Unity.Rpc.Messages.JsonRpcBatchRequest,System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles the result after sending a batch of requests.
            Outcome could be a collection of failures due to a single API issue or a mixed bag of 
            success and failure depending on the individual request outcomes.
            </summary>
            <param name="reqs">The original batch of request messages.</param>
            <param name="response">The batch of responses obtained from the HTTP request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.IsUnityPlayer">
            <summary>
            Return True if running on Unity, False otherwise
            </summary>
            <returns>Return True if running on Unity, False otherwise</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.SendAsyncRequest(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Send an async request using HttpClient or UnityWebRequest if running on Unity
            </summary>
            <param name="httpClient"></param>
            <param name="httpReq"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.JsonRpcClient.SendUnityWebRequest(System.Uri,System.Net.Http.HttpRequestMessage)">
            <summary>
            Convert a httReq to a Unity Web request
            </summary>
            <param name="uri">RPC URI</param> 
            <param name="httpReq">The http request</param>
            <returns>Http response</returns>
            <exception cref="T:System.Net.Http.HttpRequestException"></exception>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Http.RequestResult`1">
            <summary>
            Represents the result of a given request.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.WasSuccessful">
            <summary>
            Returns <c>true</c> if the request was successfully handled and parsed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.WasHttpRequestSuccessful">
            <summary>
            Returns <c>true</c> if the HTTP request was successful (e.g. Code 200).
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.WasRequestSuccessfullyHandled">
            <summary>
            Returns <c>true</c> if the request was successfully handled by the server and no error parameters are found in the result.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.Reason">
            <summary>
            Returns a string with the reason for the error if <see cref="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.WasSuccessful"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.Result">
            <summary>
            Returns the actual result of the request if <see cref="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.WasSuccessful"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.HttpStatusCode">
            <summary>
            Returns the <see cref="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.HttpStatusCode"/> of the request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.ServerErrorCode">
            <summary>
            Returns the error code if one was found in the error object when the server is unable to handle the request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.ErrorData">
            <summary>
            The error data, if applicable.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.RawRpcRequest">
            <summary>
            Contains the JSON RPC request payload
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Http.RequestResult`1.RawRpcResponse">
            <summary>
            Contains the JSON RPC response payload
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.RequestResult`1.#ctor(System.Net.Http.HttpResponseMessage,`0)">
            <summary>
            Initialize the request result.
            <param name="resultMsg">An http request result.</param>
            <param name="result">The type of the request result.</param>
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Http.RequestResult`1.#ctor">
            <summary>
            Added default constructor to facilitate unit tests.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.IdGenerator">
            <summary>
            Id generator.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.IdGenerator._id">
            <summary>
            The id of the last request performed
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.IdGenerator.GetNextId">
            <summary>
            Gets the id of the next request.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient">
            <summary>
            Base streaming Rpc client class that abstracts the websocket handling.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.ClientSocket">
            <summary>
            The web socket client abstraction.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient._logger">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.NodeAddress">
            <inheritdoc cref="P:Solana.Unity.Rpc.IStreamingRpcClient.NodeAddress"/>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.State">
            <inheritdoc cref="P:Solana.Unity.Rpc.IStreamingRpcClient.State"/>
        </member>
        <member name="E:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.ConnectionStateChangedEvent">
            <inheritdoc cref="E:Solana.Unity.Rpc.IStreamingRpcClient.ConnectionStateChangedEvent"/>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.Statistics">
            <summary>
            Statistics of the current connection.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.#ctor(System.String,System.Object,Solana.Unity.Rpc.Core.Sockets.IWebSocket,System.Net.WebSockets.ClientWebSocket)">
            <summary>
            The internal constructor that setups the client.
            </summary>
            <param name="url">The url of the streaming RPC server.</param>
            <param name="logger">The possible logger instance.</param>
            <param name="socket">The possible websocket instance. A new instance will be created if null.</param>
            <param name="clientWebSocket">The possible ClientWebSocket instance. A new instance will be created if null.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.ConnectAsync">
            <summary>
            Initializes the websocket connection and starts receiving messages asynchronously.
            </summary>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.DisconnectAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.DisconnectAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.StartListening">
            <summary>
            Starts listeing to new messages.
            </summary>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.ReadNextMessage(System.Threading.CancellationToken)">
            <summary>
            Reads the next message from the socket.
            </summary>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})">
            <summary>
            Handless a new message payload.
            </summary>
            <param name="messagePayload">The message payload.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.CleanupSubscriptions">
            <summary>
            Clean up subscription objects after disconnection.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel">
            <summary>
            Represents the channel of a given subscription.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.TokenAccount">
            <summary>
            Account subscription (<c>accountSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Account">
            <summary>
            Account subscription (<c>accountSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Logs">
            <summary>
            Logs subscription (<c>logsSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Program">
            <summary>
            Program subscription (<c>programSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Signature">
            <summary>
            Signature subscription (<c>signatureSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Slot">
            <summary>
            Slot subscription (<c>slotSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel.Root">
            <summary>
            Root subscription (<c>rootSubscribe</c>). 
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.SubscriptionEvent">
            <summary>
            Represents an event related to a given subscription.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionEvent.Status">
            <summary>
            The new status of the subscription.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionEvent.Error">
            <summary>
            A possible error mssage for this event.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionEvent.Code">
            <summary>
            A possible error code for this event.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionEvent.#ctor(Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="status">The new status.</param>
            <param name="error">The possible error message.</param>
            <param name="code">The possible error code.</param>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.SubscriptionState">
            <summary>
            Represents the state of a given subscription.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionState._rpcClient">
            <summary>
            Streaming client reference for easy unsubscription.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.SubscriptionId">
            <summary>
            The subscription ID as confirmed by the node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.Channel">
            <summary>
            The channel subscribed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.State">
            <summary>
            The current state of the subscription.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.LastError">
            <summary>
            The last error message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.LastCode">
            <summary>
            The last error code.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.AdditionalParameters">
            <summary>
            The collection of parameters that were submitted for this subscription.
            </summary>
        </member>
        <member name="E:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.SubscriptionChanged">
            <summary>
            Event fired when the state of the subcription changes.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.#ctor(Solana.Unity.Rpc.IStreamingRpcClient,Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel,System.Collections.Generic.IList{System.Object})">
            <summary>
            Base constructor.
            </summary>
            <param name="rpcClient">The streaming rpc client reference.</param>
            <param name="chan">The channel of this subscription.</param>
            <param name="additionalParameters">Additional parameters for this given subscription.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.#ctor">
            <summary>
            Default constructor to help setup tests.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.ChangeState(Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus,System.String,System.String)">
            <summary>
            Changes the state of the subscription and invokes the event.
            </summary>
            <param name="newState">The new state of the subscription.</param>
            <param name="error">The possible error message.</param>
            <param name="code">The possible error code.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.HandleData(System.Object)">
            <summary>
            Invokes the data handler.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.Unsubscribe">
            <summary>
            Unsubscribes the current subscription.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.UnsubscribeAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.Unsubscribe"/>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.SubscriptionState`1">
            <summary>
            Represents the state of a given subscription with specified type handler.
            </summary>
            <typeparam name="T">The type of the data received by this subscription.</typeparam>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionState`1.DataHandler">
            <summary>
            The data handler reference.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState`1.#ctor(Solana.Unity.Rpc.SolanaStreamingRpcClient,Solana.Unity.Rpc.Core.Sockets.SubscriptionChannel,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,`0},System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor with all parameters related to a given subscription.
            </summary>
            <param name="rpcClient">The streaming rpc client reference.</param>
            <param name="chan">The channel of this subscription.</param>
            <param name="handler">The handler for the data received.</param>
            <param name="additionalParameters">Additional parameters for this given subscription.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState`1.HandleData(System.Object)">
            <inheritdoc cref="M:Solana.Unity.Rpc.Core.Sockets.SubscriptionState.HandleData(System.Object)"/>
        </member>
        <member name="T:Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus">
            <summary>
            Represents the status of a subscription.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus.WaitingResult">
            <summary>
            Waiting for the subscription message to be handled.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus.Unsubscribed">
            <summary>
            The subscription was terminated.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus.Subscribed">
            <summary>
            The subscription is still alive.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Core.Sockets.SubscriptionStatus.ErrorSubscribing">
            <summary>
            There was an error during subscription.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.IRpcClient">
            <summary>
            Specifies the methods to interact with the JSON RPC API.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.IRpcClient.NodeAddress">
            <summary>
            The address this client connects to.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenMintInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token mint info. This method only works if the target account is a SPL token mint.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The token mint public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenMintInfo(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token mint info. This method only works if the target account is a SPL token mint.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The token mint public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The token account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The token account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)">
            <summary>
            Gets the account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="encoding">The encoding of the account data.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)">
            <summary>
            Gets the account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="encoding">The encoding of the account data.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the balance <b>asynchronously</b> for a certain public key.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and address balance.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBalance(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the balance <b>synchronously</b> for a certain public key.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <summary>
            Returns identity and transaction information about a block in the ledger.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            <para>
            The <c>transactionDetails</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Full"/> is not sent.
            </para>
            <para>
            The <c>blockRewards</c> parameter is optional, the default value, <c>false</c>, is not sent.
            </para>
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="transactionDetails">The level of transaction detail to return, see <see cref="T:Solana.Unity.Rpc.Types.TransactionDetailsFilterType"/>.</param>
            <param name="blockRewards">Whether to populate the <c>rewards</c> array, the default includes rewards.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <summary>
            Returns identity and transaction information about a confirmed block in the ledger.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            <para>
            The <c>transactionDetails</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Full"/> is not sent.
            </para>
            <para>
            The <c>blockRewards</c> parameter is optional, the default value, <c>false</c>, is not sent.
            </para>
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="transactionDetails">The level of transaction detail to return, see <see cref="T:Solana.Unity.Rpc.Types.TransactionDetailsFilterType"/>.</param>
            <param name="blockRewards">Whether to populate the <c>rewards</c> array, the default includes rewards.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <summary>
            Returns identity and transaction information about a block in the ledger.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            <para>
            The <c>transactionDetails</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Full"/> is not sent.
            </para>
            <para>
            The <c>blockRewards</c> parameter is optional, the default value, <c>false</c>, is not sent.
            </para>
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="transactionDetails">The level of transaction detail to return, see <see cref="T:Solana.Unity.Rpc.Types.TransactionDetailsFilterType"/>.</param>
            <param name="blockRewards">Whether to populate the <c>rewards</c> array, the default includes rewards.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <summary>
            Returns identity and transaction information about a confirmed block in the ledger.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            <para>
            The <c>transactionDetails</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Full"/> is not sent.
            </para>
            <para>
            The <c>blockRewards</c> parameter is optional, the default value, <c>false</c>, is not sent.
            </para>
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="transactionDetails">The level of transaction detail to return, see <see cref="T:Solana.Unity.Rpc.Types.TransactionDetailsFilterType"/>.</param>
            <param name="blockRewards">Whether to populate the <c>rewards</c> array, the default includes rewards.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockCommitmentAsync(System.UInt64)">
            <summary>
            Gets the block commitment of a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockCommitment(System.UInt64)">
            <summary>
            Gets the block commitment of a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockHeightAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current block height of the node.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockHeight(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current block height of the node.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns recent block production information from the current or previous epoch.
            <remarks>
            All the arguments are optional, but the lastSlot must be paired with a firstSlot argument.
            </remarks>
            </summary>
            <param name="identity">Filter production details only for this given validator.</param>
            <param name="firstSlot">The first slot to return production information (inclusive).</param>
            <param name="lastSlot">The last slot to return production information (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns recent block production information from the current or previous epoch.
            </summary>
            <remarks>
            All the arguments are optional, but the lastSlot must be paired with a firstSlot argument.
            </remarks>
            <param name="identity">Filter production details only for this given validator.</param>
            <param name="firstSlot">The first slot to return production information (inclusive).</param>
            <param name="lastSlot">The last slot to return production information (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of blocks between two slots.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks between two slots.
            </summary>
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of blocks between two slots.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks between two slots.
            </summary>
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockTimeAsync(System.UInt64)">
            <summary>
            Gets the estimated production time for a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetBlockTime(System.UInt64)">
            <summary>
            Gets the estimated production time for a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetClusterNodesAsync">
            <summary>
            Gets the cluster nodes.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetClusterNodes">
            <summary>
            Gets the cluster nodes.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetEpochInfoAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current epoch.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetEpochInfo(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current epoch.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetEpochScheduleAsync">
            <summary>
            Gets epoch schedule information from this cluster's genesis config.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetEpochSchedule">
            <summary>
            Gets epoch schedule information from this cluster's genesis config.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the fee calculator associated with the query blockhash, or null if the blockhash has expired.
            </summary>
            <param name="blockhash">The blockhash to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFeeCalculatorForBlockhash(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the fee calculator associated with the query blockhash, or null if the blockhash has expired.
            </summary>
            <param name="blockhash">The blockhash to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFeeRateGovernorAsync">
            <summary>
            Gets the fee rate governor information from the root bank.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFeeRateGovernor">
            <summary>
            Gets the fee rate governor information from the root bank.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFeesAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash from the ledger, a fee schedule that can be used to compute the
            cost of submitting a transaction using it, and the last slot in which the blockhash will be valid.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFees(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash from the ledger, a fee schedule that can be used to compute the
            cost of submitting a transaction using it, and the last slot in which the blockhash will be valid.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFirstAvailableBlockAsync">
            <summary>
            Returns the slot of the lowest confirmed block that has not been purged from the ledger.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetFirstAvailableBlock">
            <summary>
            Returns the slot of the lowest confirmed block that has not been purged from the ledger.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetGenesisHashAsync">
            <summary>
            Gets the genesis hash of the ledger.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetGenesisHash">
            <summary>
            Gets the genesis hash of the ledger.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetHealthAsync">
            <summary>
            Returns the current health of the node. 
            This method should return the string 'ok' if the node is healthy, or the error code along with any information provided otherwise. 
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetHealth">
            <summary>
            Returns the current health of the node. 
            This method should return the string 'ok' if the node is healthy, or the error code along with any information provided otherwise. 
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetIdentityAsync">
            <summary>
            Gets the identity pubkey for the current node.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetIdentity">
            <summary>
            Gets the identity pubkey for the current node.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationGovernorAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current inflation governor.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationGovernor(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current inflation governor.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationRateAsync">
            <summary>
            Gets the specific inflation values for the current epoch.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationRate">
            <summary>
            Gets the specific inflation values for the current epoch.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the inflation reward for a list of addresses for an epoch.
            </summary>
            <param name="addresses">The list of addresses to query, as base-58 encoded strings.</param>
            <param name="epoch">The epoch.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the inflation reward for a list of addresses for an epoch.
            </summary>
            <param name="addresses">The list of addresses to query, as base-58 encoded strings.</param>
            <param name="epoch">The epoch.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetLargestAccountsAsync(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest accounts, by lamport balance.
            </summary>
            <remarks>Results may be cached up to two hours.</remarks>
            <param name="filter">Filter results by account type.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetLargestAccounts(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest accounts, by lamport balance.
            </summary>
            <remarks>Results may be cached up to two hours.</remarks>
            <param name="filter">Filter results by account type.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns the leader schedule for an epoch.
            </summary>
            <param name="slot">Fetch the leader schedule for the epoch that corresponds to the provided slot. 
            If unspecified, the leader schedule for the current epoch is fetched.</param>
            <param name="identity">Filter results for this validator only (base 58 encoded string and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns the leader schedule for an epoch.
            </summary>
            <param name="slot">Fetch the leader schedule for the epoch that corresponds to the provided slot. 
            If unspecified, the leader schedule for the current epoch is fetched.</param>
            <param name="identity">Filter results for this validator only (base 58 encoded string and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMaxRetransmitSlotAsync">
            <summary>
            Gets the maximum slot seen from retransmit stage.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMaxRetransmitSlot">
            <summary>
            Gets the maximum slot seen from retransmit stage.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMaxShredInsertSlotAsync">
            <summary>
            Gets the maximum slot seen from after shred insert.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMaxShredInsertSlot">
            <summary>
            Gets the maximum slot seen from after shred insert.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the minimum balance required to make account rent exempt.
            </summary>
            <param name="accountDataSize">The account data size.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the minimum balance required to make account rent exempt.
            </summary>
            <param name="accountDataSize">The account data size.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMinimumLedgerSlotAsync">
            <summary>
            Gets the lowest slot that the node has information about in its ledger.
            <remarks>
            This value may decrease over time if a node is configured to purging data.
            </remarks>
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMinimumLedgerSlot">
            <summary>
            Gets the lowest slot that the node has information about in its ledger.
            <remarks>
            This value may decrease over time if a node is configured to purging data.
            </remarks>
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for multiple accounts.
            </summary>
            <param name="accounts">The list of the accounts public keys.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for multiple accounts.
            </summary>
            <param name="accounts">The list of the accounts public keys.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetProgramAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})">
            <summary>
            Returns all accounts owned by the provided program Pubkey.
            <remarks>Accounts must meet all filter criteria to be included in the results.</remarks>
            </summary>
            <param name="pubKey">The program public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="dataSize">The data size of the account to compare against the program account data.</param>
            <param name="memCmpList">The list of comparisons to match against the program account data.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetProgramAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})">
            <summary>
            Returns all accounts owned by the provided program Pubkey.
            <remarks>Accounts must meet all filter criteria to be included in the results.</remarks>
            </summary>
            <param name="pubKey">The program public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="dataSize">The data size of the account to compare against the program account data.</param>
            <param name="memCmpList">The list of comparisons to match against the program account data.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetRecentBlockHashAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetRecentBlockHash(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)">
            <summary>
            Gets a list of recent performance samples.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="limit">Maximum transaction signatures to return, between 1-720. Default is 720.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetRecentPerformanceSamples(System.UInt64)">
            <summary>
            Gets a list of recent performance samples.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="limit">Maximum transaction signatures to return, between 1-720. Default is 720.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets signatures with the given commitment for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedSignaturesForAddress2Async(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets confirmed signatures for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets signatures with the given commitment for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedSignaturesForAddress2(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets confirmed signatures for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the status of a list of signatures.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="transactionHashes">The list of transactions to search status info for.</param>
            <param name="searchTransactionHistory">If the node should search for signatures in it's ledger cache.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the status of a list of signatures.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="transactionHashes">The list of transactions to search status info for.</param>
            <param name="searchTransactionHistory">If the node should search for signatures in it's ledger cache.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlotAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot the node is processing
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlot(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot the node is processing
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeaderAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot leader.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeader(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot leader.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the slot leaders for a given slot range.
            </summary>
            <param name="start">The start slot.</param>
            <param name="limit">The result limit.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the slot leaders for a given slot range.
            </summary>
            <param name="start">The start slot.</param>
            <param name="limit">The result limit.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSnapshotSlotAsync">
            <summary>
            Gets the highest slot that the node has a snapshot for.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSnapshotSlot">
            <summary>
            Gets the highest slot that the node has a snapshot for.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the epoch activation information for a stake account.
            </summary>
            <param name="publicKey">Public key of account to query, as base-58 encoded string</param>
            <param name="epoch">Epoch for which to calculate activation details.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetStakeActivation(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the epoch activation information for a stake account.
            </summary>
            <param name="publicKey">Public key of account to query, as base-58 encoded string</param>
            <param name="epoch">Epoch for which to calculate activation details.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSupplyAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current supply.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetSupply(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current supply.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token balance of an SPL Token account.
            </summary>
            <param name="splTokenAccountPublicKey">Public key of Token account to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountBalance(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the token balance of an SPL Token account.
            </summary>
            <param name="splTokenAccountPublicKey">Public key of Token account to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by approved delegate.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by approved delegate.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by token owner.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by token owner.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenLargestAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest token accounts of a particular SPL Token.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenLargestAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest token accounts of a particular SPL Token.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenSupplyAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Get the token supply of an SPL Token type.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTokenSupply(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Get the token supply of an SPL Token type.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTransactionCountAsync(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the total transaction count of the ledger.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetTransactionCount(Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the total transaction count of the ledger.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetVersionAsync">
            <summary>
            Gets the current node's software version info.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetVersion">
            <summary>
            Gets the current node's software version info.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetVoteAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the account info and associated stake for all voting accounts in the current bank.
            </summary>
            <param name="votePubKey">Filter by validator vote address, base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetVoteAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Gets the account info and associated stake for all voting accounts in the current bank.
            </summary>
            <param name="votePubKey">Filter by validator vote address, base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Requests an airdrop to the passed <c>pubKey</c> of the passed <c>lamports</c> amount.
            <remarks>
            The <c>commitment</c> parameter is optional, the default <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is used.
            </remarks>
            </summary>
            <param name="pubKey">The public key of to receive the airdrop.</param>
            <param name="lamports">The amount of lamports to request.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.RequestAirdrop(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Requests an airdrop to the passed <c>pubKey</c> of the passed <c>lamports</c> amount.
            <remarks>
            The <c>commitment</c> parameter is optional, the default <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is used.
            </remarks>
            </summary>
            <param name="pubKey">The public key of to receive the airdrop.</param>
            <param name="lamports">The amount of lamports to request.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SendTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as base-64 encoded string.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preFlightCommitment">The block commitment used for preflight.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SendTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as base-64 encoded string.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preFlightCommitment">The block commitment used for preflight.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as byte array.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SendTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as byte array.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a base-64 encoded string.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SimulateTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction base-64 encoded string.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a byte array.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a byte array.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.SendBatchRequestAsync(Solana.Unity.Rpc.Messages.JsonRpcBatchRequest)">
            <summary>
            Low-level method to send a batch of JSON RPC requests
            </summary>
            <param name="reqs"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IRpcClient.GetNextIdForReq">
            <summary>
            Generates the next unique id for the request.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.IStreamingRpcClient">
            <summary>
            Represents the streaming RPC client for the solana API.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.IStreamingRpcClient.State">
            <summary>
            Current connection state.
            </summary>
        </member>
        <member name="E:Solana.Unity.Rpc.IStreamingRpcClient.ConnectionStateChangedEvent">
            <summary>
            Event triggered when the connection status changes between connected and disconnected.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.IStreamingRpcClient.NodeAddress">
            <summary>
            The address this client connects to.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.IStreamingRpcClient.Statistics">
            <summary>
            Statistics of the current connection.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to AccountInfo notifications.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the AccountInfo. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeTokenAccountAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to Token Account notifications. Note: Only works if the account is a Token Account.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeTokenAccount(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes  to Token Account notifications. Note: Only works if the account is a Token Account.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to the logs notifications that mention a given public key.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key to filter by mention.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to the logs notifications.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="subscriptionType">The filter mechanism.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the logs notifications that mention a given public key. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key to filter by mention.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfo(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the logs notifications. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="subscriptionType">The filter mechanism.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to a transaction signature to receive notification when the transaction is confirmed.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="transactionSignature">The transaction signature.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes to a transaction signature to receive notification when the transaction is confirmed. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="transactionSignature">The transaction signature.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to changes to a given program account data.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="programPubkey">The program pubkey.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)">
            <summary>
            Subscribes to changes to a given program account data. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="programPubkey">The program pubkey.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})">
            <summary>
            Subscribes asynchronously to receive notifications anytime a slot is processed by the validator.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSlotInfo(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})">
            <summary>
            Subscribes to receive notifications anytime a slot is processed by the validator. This is a synchronous and blocking function.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeRootAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <summary>
            Subscribes asynchronously to receive notifications anytime a new root is set by the validator.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeRoot(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <summary>
            Subscribes to receive notifications anytime a new root is set by the validator. This is a synchronous and blocking function.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.UnsubscribeAsync(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)">
            <summary>
            Asynchronously unsubscribes from a given subscription using the state object.
            </summary>
            <param name="subscription">The subscription state object.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.Unsubscribe(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)">
            <summary>
            Unsubscribes from a given subscription using the state object. This is a synchronous and blocking function.
            </summary>
            <param name="subscription">The subscription state object.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.ConnectAsync">
            <summary>
            Asynchronously initializes the client connection and starts listening for socket messages.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.IStreamingRpcClient.DisconnectAsync">
            <summary>
            Asynchronously disconnects and removes all running subscriptions.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcBase">
            <summary>
            Base JpnRpc message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcBase.Jsonrpc">
            <summary>
            The rpc version.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcBase.Id">
            <summary>
            The id of the message.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcBatchRequest">
            <summary>
            This class represents multiple JsonRpcRequest objects and is used for making 
            a of batch requests in a single HTTP request.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcBatchResponse">
            <summary>
            This class represents the response from a request containing a batch of JSON RPC requests
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem">
            <summary>
            An object that represents a response item from an API batch request.
            The response type hint is supplied, 
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem.ResultType">
            <summary>
            The anticipated runtime type of this result.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem.Result">
            <summary>
            The RPC result of a given request as object.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem.ResultAs``1">
            <summary>
            The RPC result of a given request cast as T
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcRequest">
            <summary>
            Rpc request message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcRequest.Method">
            <summary>
            The request method.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcRequest.Params">
            <summary>
            The method parameters list.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Messages.JsonRpcRequest.ShouldSerializeParams">
            <summary>
            Serialize params only if not null
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcResponse`1">
            <summary>
            Holds a rpc request response.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcResponse`1.Result">
            <summary>
            The result of a given request.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcErrorResponse">
            <summary>
            Error message from a given request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcErrorResponse.Error">
            <summary>
            The detailed error deserialized.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcErrorResponse.ErrorMessage">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.ErrorContent">
            <summary>
            Holds the contents of an error message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ErrorContent.Code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ErrorContent.Message">
            <summary>
            The string error message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ErrorContent.Data">
            <summary>
            Possible extension data as a dictionary.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.ContextObj">
            <summary>
            Context objects, holds the slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ContextObj.Slot">
            <summary>
            The slot.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.ResponseValue`1">
            <summary>
            Contains the pair Context + Value from a given request.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ResponseValue`1.Context">
            <summary>
            The context object from a given request.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.ResponseValue`1.Value">
            <summary>
            The value object from a given request.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Messages.JsonRpcStreamResponse`1">
            <summary>
            Holds a json rpc message from a streaming socket.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcStreamResponse`1.Result">
            <summary>
            The message received.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Messages.JsonRpcStreamResponse`1.Subscription">
            <summary>
            The subscription id that the message belongs to.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenAccountInfo">
            <summary>
            Represents the account info for a given token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfo.Data">
            <summary>
            The parsed token account data field.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenMintInfo">
            <summary>
            Represents the account info for a given token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfo.Data">
            <summary>
            The parsed token account data field.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenMintData">
            <summary>
            Represents a Token Mint account data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintData.Program">
            <summary>
            The program responsible for the account data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintData.Space">
            <summary>
            Account data space.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintData.Parsed">
            <summary>
            The parsed token mint data.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.ParsedTokenMintData">
            <summary>
            Represents the Token Mint parsed data, as formatted per SPL token program.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ParsedTokenMintData.Info">
            <summary>
            Contains the details of the token mint.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ParsedTokenMintData.Type">
            <summary>
            The type of the account managed by the SPL token program.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenMintInfoDetails">
            <summary>
            Represents a Token Mint account info as formatted per the SPL token program.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.FreezeAuthority">
            <summary>
            The freeze authority.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.MintAuthority">
            <summary>
            The mint authority.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.Decimals">
            <summary>
            The decimals cases to consider when converter to human readable token amounts.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.IsInitialized">
            <summary>
            Is the mint account initialized?
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.Supply">
            <summary>
            The current token supply.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenMintInfoDetails.SupplyUlong">
            <summary>
            The current token supply parsed as ulong.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenAccountInfoDetails">
            <summary>
            Represents the details of the info field of a token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.TokenAmount">
            <summary>
            The token balance data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.Delegate">
            <summary>
            A base-58 encoded public key of the delegate.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.DelegatedAmount">
            <summary>
            The token balance that has been delegated.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.State">
            <summary>
            The account's state.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.IsNative">
            <summary>
            If the account is a native token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.Mint">
            <summary>
            A base-58 encoded public key of the token's mint.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountInfoDetails.Owner">
            <summary>
            A base-58 encoded public key of the program this account as been assigned to.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.ParsedTokenAccountData">
            <summary>
            Represents the parsed account data, as available by the program-specific state parser.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ParsedTokenAccountData.Type">
            <summary>
            The type of account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ParsedTokenAccountData.Info">
            <summary>
            The token account info, containing account balances, delegation and ownership info.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenAccountData">
            <summary>
            Represents a token account's data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountData.Program">
            <summary>
            The program responsible for the account data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountData.Space">
            <summary>
            Account data space.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccountData.Parsed">
            <summary>
            The parsed account data, as available by the program-specific state parser.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.LargeTokenAccount">
            <summary>
            Represents a large token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.LargeTokenAccount.Address">
            <summary>
            The address of the token account.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.LargeAccount">
            <summary>
            Represents a large account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.LargeAccount.Lamports">
            <summary>
            The lamports balance of the account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.LargeAccount.Address">
            <summary>
            The address of the token account.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenBalance">
            <summary>
            Represents the token balance of an account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.Amount">
            <summary>
            The raw token account balance without decimals.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.Decimals">
            <summary>
            The number of base 10 digits to the right of the decimal place.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.UiAmount">
            <summary>
            The token account balance, using mint-prescribed decimals. DEPRECATED.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.UiAmountString">
            <summary>
            The token account balance as a string, using mint-prescribed decimals.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.AmountUlong">
            <summary>
            The token account balance as a ulong
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.AmountDecimal">
            <summary>
            The token account balance as a decimal
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalance.AmountDouble">
            <summary>
            The token account balance as a double
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.AccountInfoBase">
            <summary>
            The base class of the account info, to be subclassed for token a account info classes.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountInfoBase.Lamports">
            <summary>
            The lamports balance of the account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountInfoBase.Owner">
            <summary>
            The account owner.
            <remarks>
            This value could be another regular address or a program.
            </remarks>
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountInfoBase.Executable">
            <summary>
            Indicates whether the account contains a program (and is strictly read-only).
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountInfoBase.RentEpoch">
            <summary>
            The epoch at which the account will next owe rent.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.AccountInfo">
            <summary>
            Represents the account info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountInfo.Data">
            <summary>
            The actual account data.
            <remarks>
            This field should contain two values: first value is the data, the second one is the encoding - should always read base64.
            </remarks>
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.AccountKeyPair">
            <summary>
            Represents the tuple account key and account data.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountKeyPair.Account">
            <summary>
            The account info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountKeyPair.PublicKey">
            <summary>
            A base-58 encoded public key representing the account's public key.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.AccountKeysList">
            <summary>
            A wrapper around a list of <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/>s that takes care of deduplication and ordering according to 
            the wire format specification.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.AccountKeysList._accounts">
            <summary>
            The account metas list.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountKeysList.AccountList">
            <summary>
            Get the accounts as a list.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountKeysList.#ctor">
            <summary>
            Initialize the account keys list for use within transaction building.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountKeysList.Add(Solana.Unity.Rpc.Models.AccountMeta)">
            <summary>
            Add an account meta to the list of accounts.
            </summary>
            <param name="accountMeta">The account meta to add.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountKeysList.Add(System.Collections.Generic.IEnumerable{Solana.Unity.Rpc.Models.AccountMeta})">
            <summary>
            Add a list of account metas to the list of accounts.
            </summary>
            <param name="accountMetas">The account metas to add.</param>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.AccountMeta">
            <summary>
            Implements the account meta logic, which defines if an account represented by public key is a signer, a writable account or both.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountMeta.PublicKeyBytes">
            <summary>
            The public key as a byte array.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountMeta.PublicKey">
            <summary>
            Get the public key encoded as base58.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountMeta.IsSigner">
            <summary>
            A boolean which defines if the account is a signer account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.AccountMeta.IsWritable">
            <summary>
            A boolean which defines if the account is a writable account.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountMeta.#ctor(Solana.Unity.Wallet.PublicKey,System.Boolean,System.Boolean)">
            <summary>
            Initialize the account meta with the passed public key, being a non-signing account for the transaction.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="isWritable">Whether the account is writable.</param>
            <param name="isSigner">Whether the account is a signer.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountMeta.Writable(Solana.Unity.Wallet.PublicKey,System.Boolean)">
            <summary>
            Initializes an <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/> for a writable account with the given <see cref="P:Solana.Unity.Rpc.Models.AccountMeta.PublicKey"/>
            and a bool that signals whether the account is a signer or not.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="isSigner">Whether the account is a signer.</param>
            <returns>The <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/> instance.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(Solana.Unity.Wallet.PublicKey,System.Boolean)">
            <summary>
            Initializes an <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/> for a read-only account with the given <see cref="P:Solana.Unity.Rpc.Models.AccountMeta.PublicKey"/>
            and a bool that signals whether the account is a signer or not.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="isSigner">Whether the account is a signer.</param>
            <returns>The <see cref="T:Solana.Unity.Rpc.Models.AccountMeta"/> instance.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.BlockInfo">
            <summary>
            Represents the block info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.BlockTime">
            <summary>
            Estimated block production time.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.Blockhash">
            <summary>
            A base-58 encoded public key representing the block hash.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.PreviousBlockhash">
            <summary>
            A base-58 encoded public key representing the block hash of this block's parent.
            <remarks>
            If the parent block is no longer available due to ledger cleanup, this field will return
            '11111111111111111111111111111111'
            </remarks>
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.ParentSlot">
            <summary>
            The slot index of this block's parent.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.BlockHeight">
            <summary>
            The number of blocks beneath this block.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.Rewards">
            <summary>
            The rewards for this given block.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockInfo.Transactions">
            <summary>
            Collection of transactions and their metadata within this block.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionMetaSlotInfo">
            <summary>
            Represents the transaction, metadata and its containing slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMetaSlotInfo.Slot">
            <summary>
            The slot this transaction was processed in.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMetaSlotInfo.BlockTime">
            <summary>
            Estimated block production time.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionMetaInfo">
            <summary>
            Represents the tuple transaction and metadata.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMetaInfo.Transaction">
            <summary>
            The transaction information.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMetaInfo.Meta">
            <summary>
            The metadata information.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.RewardInfo">
            <summary>
            Represents the reward information related to a given account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.RewardInfo.Pubkey">
            <summary>
            The account pubkey as base58 encoded string.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.RewardInfo.Lamports">
            <summary>
            Number of reward lamports credited or debited by the account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.RewardInfo.PostBalance">
            <summary>
            Account balance in lamports after the reward was applied.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.RewardInfo.RewardType">
            <summary>
            Type of the reward.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.RewardType">
            <summary>
            The type of the reward.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.RewardType.Unknown">
            <summary>
            Default value in case the returned value is undefined.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.RewardType.Fee">
            <summary>
            Fee reward.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.RewardType.Rent">
            <summary>
            Rent reward.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.RewardType.Voting">
            <summary>
            Voting reward.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.RewardType.Staking">
            <summary>
            Staking reward.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionInfo">
            <summary>
            Represents a transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionInfo.Signatures">
            <summary>
            The signatures of this transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionInfo.Message">
            <summary>
            The message contents of the transaction.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionContentInfo">
            <summary>
            Represents the contents of the trasaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionContentInfo.AccountKeys">
            <summary>
            List of base-58 encoded public keys used by the transaction, including by the instructions and for signatures.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionContentInfo.Header">
            <summary>
            Details the account types and signatures required by the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionContentInfo.RecentBlockhash">
            <summary>
             A base-58 encoded hash of a recent block in the ledger used to prevent transaction duplication and to give transactions lifetimes.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionContentInfo.Instructions">
            <summary>
            List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionHeaderInfo">
            <summary>
            Details the number and type of accounts and signatures in a given transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionHeaderInfo.NumRequiredSignatures">
            <summary>
            The total number of signatures required to make the transaction valid. 
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionHeaderInfo.NumReadonlySignedAccounts">
            <summary>
            The last NumReadonlySignedAccounts of the signed keys are read-only accounts.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionHeaderInfo.NumReadonlyUnsignedAccounts">
            <summary>
            The last NumReadonlyUnsignedAccounts of the unsigned keys are read-only accounts.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionMeta">
            <summary>
            Represents the transaction metadata.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.Error">
            <summary>
            Possible transaction error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.Fee">
            <summary>
            Fee this transaction was charged.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.PreBalances">
            <summary>
            Collection of account balances from before the transaction was processed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.PostBalances">
            <summary>
            Collection of account balances after the transaction was processed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.InnerInstructions">
            <summary>
            List of inner instructions or omitted if inner instruction recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.PreTokenBalances">
            <summary>
            List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.PostTokenBalances">
            <summary>
            List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionMeta.LogMessages">
            <summary>
            Array of string log messages or omitted if log message recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenBalanceInfo">
            <summary>
            Represents the structure of a token balance metadata for a transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalanceInfo.AccountIndex">
            <summary>
            Index of the account in which the token balance is provided for.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalanceInfo.Mint">
            <summary>
            Pubkey of the token's mint.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenBalanceInfo.UiTokenAmount">
            <summary>
            Token balance details.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InnerInstruction">
            <summary>
            Represents an inner instruction. Inner instruction are cross-program instructions that are invoked during transaction processing.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InnerInstruction.Index">
            <summary>
            Index of the transaction instruction from which the inner instruction(s) originated
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InnerInstruction.Instructions">
            <summary>
            List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InstructionInfo">
            <summary>
            Represents the data of given instruction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionInfo.ProgramIdIndex">
            <summary>
            Index into the <i>Message.AccountKeys</i> array indicating the program account that executes this instruction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionInfo.Accounts">
            <summary>
            List of ordered indices into the <i>Message.AccountKeys</i> array indicating which accounts to pass to the program.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionInfo.Data">
            <summary>
            The program input data encoded in a base-58 string.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.BlockCommitment">
            <summary>
            Represents the block commitment info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockCommitment.Commitment">
            <summary>
            A list of values representing the amount of cluster stake in lamports that has
            voted onn the block at each depth from 0 to (max lockout history + 1).
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockCommitment.TotalStake">
            <summary>
            Total active stake, in lamports, of the current epoch.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.FeeCalculator">
            <summary>
            Represents the fee calculator info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeCalculator.LamportsPerSignature">
            <summary>
            The amount, in lamports, to be paid per signature.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.FeeCalculatorInfo">
            <summary>
            Represents the fee calculator info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeCalculatorInfo.FeeCalculator">
            <summary>
            The fee calculator info.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.BlockHash">
            <summary>
            Represents block hash info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockHash.Blockhash">
            <summary>
            A base-58 encoded public key representing the block hash.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockHash.FeeCalculator">
            <summary>
            The fee calculator data.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.BlockProductionInfo">
            <summary>
            Holds the block production information.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockProductionInfo.ByIdentity">
            <summary>
            The block production as a map from the validator to a list 
            of the number of leader slots and number of blocks produced
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.BlockProductionInfo.Range">
            <summary>
            The block production range by slots.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.SlotRange">
            <summary>
            Represents a slot range.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SlotRange.FirstSlot">
            <summary>
            The first slot of the range (inclusive).
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SlotRange.LastSlot">
            <summary>
            The last slot of the range (inclusive).
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.ClusterNode">
            <summary>
            Represents a node in the cluster.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.Gossip">
            <summary>
            Gossip network address for the node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.PublicKey">
            <summary>
            A base-58 encoded public key associated with the node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.Rpc">
            <summary>
            JSON RPC network address for the node. The service may not be enabled.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.Tpu">
            <summary>
            TPU network address for the node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.Version">
            <summary>
            The software version of the node. The information may not be available.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.FeatureSet">
            <summary>
            Unique identifier of the current software's feature set.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ClusterNode.ShredVersion">
            <summary>
            The shred version the node has been configured to use.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.EpochInfo">
            <summary>
            Represents information about the current epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochInfo.AbsoluteSlot">
            <summary>
            The current slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochInfo.BlockHeight">
            <summary>
            The current block height.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochInfo.Epoch">
            <summary>
            The current epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochInfo.SlotIndex">
            <summary>
            The current slot relative to the start of the current epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochInfo.SlotsInEpoch">
            <summary>
            The number of slots in this epoch
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.EpochScheduleInfo">
            <summary>
            Represents information about the epoch schedule.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochScheduleInfo.SlotsPerEpoch">
            <summary>
            The maximum number of slots in each epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochScheduleInfo.LeaderScheduleSlotOffset">
            <summary>
            The number of slots before beginning of an epoch to calculate a leader schedule for that epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochScheduleInfo.FirstNormalEpoch">
            <summary>
            The first normal-length epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochScheduleInfo.FirstNormalSlot">
            <summary>
            The first normal-length slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.EpochScheduleInfo.Warmup">
            <summary>
            Whether epochs start short and grow.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.ErrorResult">
            <summary>
            Holds an error result.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ErrorResult.Error">
            <summary>
            The error string.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.FeeRateGovernor">
            <summary>
            Represents the fee rate governor.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernor.BurnPercent">
            <summary>
            Percentage of fees collected to be destroyed.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernor.MaxLamportsPerSignature">
            <summary>
            Highest value LamportsPerSignature can attain for the next slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernor.MinLamportsPerSignature">
            <summary>
            Smallest value LamportsPerSignature can attain for the next slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernor.TargetLamportsPerSignature">
            <summary>
            Desired fee rate for the cluster.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernor.TargetSignaturesPerSlot">
            <summary>
            Desired signature rate for the cluster.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.FeeRateGovernorInfo">
            <summary>
            Represents the fee rate governor info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeeRateGovernorInfo.FeeRateGovernor">
            <summary>
            The fee rate governor.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.FeesInfo">
            <summary>
            Represents information about the fees.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeesInfo.Blockhash">
            <summary>
            A block hash as base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeesInfo.FeeCalculator">
            <summary>
            The fee calculator for this block hash.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeesInfo.LastValidSlot">
            <summary>
            DEPRECATED - this value is inaccurate and should not be relied upon
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.FeesInfo.LastValidBlockHeight">
            <summary>
            Last block height at which a blockhash will be valid.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.MemCmp">
            <summary>
            Represents the <c>memcmp</c> filter for the <see cref="M:Solana.Unity.Rpc.IRpcClient.GetProgramAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})"/> method.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.MemCmp.Offset">
            <summary>
            The offset into program account data at which to start the comparison.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.MemCmp.Bytes">
            <summary>
            The data to match against the program data, as base-58 encoded string and limited to 129 bytes.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.NodeIdentity">
            <summary>
            Represents the identity public key for the current node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.NodeIdentity.Identity">
            <summary>
            The identity public key of the current node, as base-58 encoded string.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InflationGovernor">
            <summary>
            Represents inflation governor information.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationGovernor.Initial">
            <summary>
            The initial inflation percentage from time zero.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationGovernor.Terminal">
            <summary>
            The terminal inflation percentage.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationGovernor.Taper">
            <summary>
            The rate per year at which inflation is lowered.
            <remarks>Rate reduction is derived using the target slot time as per genesis config.</remarks>
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationGovernor.Foundation">
            <summary>
            Percentage of total inflation allocated to the foundation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationGovernor.FoundationTerm">
            <summary>
            Duration of foundation pool inflation in years.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InflationRate">
            <summary>
            Represents the inflation rate information.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationRate.Epoch">
            <summary>
            Epoch for which these values are valid.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationRate.Foundation">
            <summary>
            Percentage of total inflation allocated to the foundation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationRate.Total">
            <summary>
            Percentage of total inflation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationRate.Validator">
            <summary>
            Percentage of total inflation allocated to validators.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InflationReward">
            <summary>
            Represents the inflation reward for a certain address.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationReward.Epoch">
            <summary>
            Epoch for which a reward occurred.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationReward.EffectiveSlot">
            <summary>
            The slot in which the rewards are effective.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationReward.Amount">
            <summary>
            The reward amount in lamports.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InflationReward.PostBalance">
            <summary>
            Post balance of the account in lamports.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InstructionError">
            <summary>
            Represents an Instruction error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionError.InstructionIndex">
            <summary>
            The index of the instruction that caused the error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionError.Type">
            <summary>
            The type of the instruction error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionError.CustomError">
            <summary>
            Possible custom error id from a program.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.InstructionError.BorshIoError">
            <summary>
            Possible string from borsh error.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.InstructionErrorType">
            <summary>
            Possible Types of instruction errors.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.GenericError">
            <summary>
            The program instruction returned an error. (Deprecated)
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidArgument">
            <summary>
            The arguments provided to a program were invalid
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidInstructionData">
            <summary>
            
            </summary>An instruction's data contents were invalid
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidAccountData">
            <summary>
            An account's data contents was invalid
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountDataTooSmall">
            <summary>
            An account's data was too small
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InsufficientFunds">
            <summary>
            An account's balance was too small to complete the instruction
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.IncorrectProgramId">
            <summary>
            The account did not have the expected program id
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.MissingRequiredSignature">
            <summary>
            A signature was required but not found
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountAlreadyInitialized">
            <summary>
             An initialize instruction was sent to an account that has already been initialized.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.UninitializedAccount">
            <summary>
            An attempt to operate on an account that hasn't been initialized.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.UnbalancedInstruction">
            <summary>
            Program's instruction lamport balance does not equal the balance after the instruction
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ModifiedProgramId">
            <summary>
            Program modified an account's program id
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExternalAccountLamportSpend">
            <summary>
            Program spent the lamports of an account that doesn't belong to it
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExternalAccountDataModified">
            <summary>
             Program modified the data of an account that doesn't belong to it
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ReadonlyLamportChange">
            <summary>
            Read-only account's lamports modified
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ReadonlyDataModified">
            <summary>
            Read-only account's data was modified
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.DuplicateAccountIndex">
            <summary>
            An account was referenced more than once in a single instruction 
            (Deprecated, instructions can now contain duplicate accounts)
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExecutableModified">
            <summary>
            Executable bit on account changed, but shouldn't have
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.RentEpochModified">
            <summary>
            Rent_epoch account changed, but shouldn't have
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.NotEnoughAccountKeys">
            <summary>
             The instruction expected additional account keys
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountDataSizeChanged">
            <summary>
            A non-system program changed the size of the account data
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountNotExecutable">
            <summary>
            The instruction expected an executable account
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountBorrowFailed">
            <summary>
            Failed to borrow a reference to account data, already borrowed
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountBorrowOutstanding">
            <summary>
            Account data has an outstanding reference after a program's execution
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.DuplicateAccountOutOfSync">
            <summary>
            The same account was multiply passed to an on-chain program's entrypoint, but the program
            modified them differently.  A program can only modify one instance of the account because
            the runtime cannot determine which changes to pick or how to merge them if both are modified
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.Custom">
            <summary>
            Allows on-chain programs to implement program-specific error types and see them returned
            by the Solana runtime. A program-specific error may be any type that is represented as
            or serialized to a u32 integer.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidError">
            <summary>
            The return value from the program was invalid.  Valid errors are either a defined builtin
            error value or a user-defined error in the lower 32 bits.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExecutableDataModified">
            <summary>
            Executable account's data was modified
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExecutableLamportChange">
            <summary>
            Executable account's lamports modified
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ExecutableAccountNotRentExempt">
            <summary>
            Executable accounts must be rent exempt
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.UnsupportedProgramId">
            <summary>
            Unsupported program id
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.CallDepth">
            <summary>
            Cross-program invocation call depth too deep
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.MissingAccount">
            <summary>
            An account required by the instruction is missing
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ReentrancyNotAllowed">
            <summary>
            Cross-program invocation reentrancy not allowed for this instruction
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.MaxSeedLengthExceeded">
            <summary>
            Length of the seed is too long for address generation
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidSeeds">
            <summary>
            Provided seeds do not result in a valid address
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidRealloc">
            <summary>
            Failed to reallocate account data of this length
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ComputationalBudgetExceeded">
            <summary>
            Computational budget exceeded
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.PrivilegeEscalation">
            <summary>
            Cross-program invocation with unauthorized signer or writable account
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ProgramEnvironmentSetupFailure">
            <summary>
            Failed to create program execution environment
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ProgramFailedToComplete">
            <summary>
            Program failed to complete
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ProgramFailedToCompile">
            <summary>
            Program failed to compile
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.Immutable">
            <summary>
            Account is immutable
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.IncorrectAuthority">
            <summary>
            Incorrect authority provided
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.BorshIoError">
            <summary>
            Failed to serialize or deserialize account data
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.AccountNotRentExempt">
            <summary>
            An account does not have enough lamports to be rent-exempt
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.InvalidAccountOwner">
            <summary>
            Invalid account owner
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.ArithmeticOverflow">
            <summary>
            Program arithmetic overflowed
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.InstructionErrorType.UnsupportedSysvar">
            <summary>
            Unsupported sysvar
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.Log">
            <summary>
            Represents a log during transaction simulation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Log.Error">
            <summary>
            The error associated with the transaction simulation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Log.Logs">
            <summary>
            The log messages the transaction instructions output during execution.
            <remarks>
            This will be null if the simulation failed before the transaction was able to execute.
            </remarks>
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.LogInfo">
            <summary>
            Represents a log message when subscribing to the log output of the Streaming RPC.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.LogInfo.Signature">
            <summary>
            The signature of the transaction.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.SimulationLogs">
            <summary>
            Represents the result of a transaction simulation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SimulationLogs.Accounts">
            <summary>
            Account infos as requested in the simulateTransaction method.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SimulationLogs.Error">
            <summary>
            The error associated with the transaction simulation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SimulationLogs.Logs">
            <summary>
            The log messages the transaction instructions output during execution.
            <remarks>
            This will be null if the simulation failed before the transaction was able to execute.
            </remarks>
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.ErrorData">
            <summary>
            Represents a complete error message.
            </summary>
            <remarks>See RpcError::RpcResponseError in solana\client\src\rpc_request.rs</remarks>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.ErrorData.UnitsConsumed">
            <summary>
            Represents the number of compute units consumed by the transactions.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.MessageHeader">
            <summary>
            The message header.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.MessageHeader.Layout">
            <summary>
            Represents the layout of the <see cref="T:Solana.Unity.Rpc.Models.MessageHeader"/> encoded values.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.MessageHeader.Layout.RequiredSignaturesOffset">
            <summary>
            The offset at which the byte that defines the number of required signatures begins.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.MessageHeader.Layout.ReadOnlySignedAccountsOffset">
            <summary>
            The offset at which the byte that defines the number of read-only signer accounts begins.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.MessageHeader.Layout.ReadOnlyUnsignedAccountsOffset">
            <summary>
            The offset at which the byte that defines the number of read-only non-signer accounts begins.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.MessageHeader.Layout.HeaderLength">
            <summary>
            The message header length.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.MessageHeader.RequiredSignatures">
            <summary>
            The number of required signatures.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.MessageHeader.ReadOnlySignedAccounts">
            <summary>
            The number of read-only signed accounts.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.MessageHeader.ReadOnlyUnsignedAccounts">
            <summary>
            The number of read-only non-signed accounts.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.MessageHeader.ToBytes">
            <summary>
            Convert the message header to byte array format.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.Message">
            <summary>
            Represents the Message of a Solana <see cref="T:Solana.Unity.Rpc.Models.Transaction"/>.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Message.Header">
            <summary>
            The header of the <see cref="T:Solana.Unity.Rpc.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Message.AccountKeys">
            <summary>
            The list of account <see cref="T:Solana.Unity.Wallet.PublicKey"/>s present in the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Message.Instructions">
            <summary>
            The list of <see cref="T:Solana.Unity.Rpc.Models.TransactionInstruction"/>s present in the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Message.RecentBlockhash">
            <summary>
            The recent block hash for the transaction.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Message.IsAccountWritable(System.Int32)">
            <summary>
            Check whether an account is writable.
            </summary>
            <param name="index">The index of the account in the account keys.</param>
            <returns>true if the account is writable, false otherwise.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Message.IsAccountSigner(System.Int32)">
            <summary>
            Check whether an account is a signer.
            </summary>
            <param name="index">The index of the account in the account keys.</param>
            <returns>true if the account is an expected signer, false otherwise.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Message.Serialize">
            <summary>
            Serialize the message into the wire format.
            </summary>
            <returns>A byte array corresponding to the serialized message.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Message.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize a compiled message into a Message object.
            </summary>
            <param name="data">The data to deserialize into the Message object.</param>
            <returns>The Message object instance.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Message.Deserialize(System.String)">
            <summary>
            Deserialize a compiled message encoded as base-64 into a Message object.
            </summary>
            <param name="data">The data to deserialize into the Message object.</param>
            <returns>The Transaction object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the given string is null.</exception>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.PerformanceSample">
            <summary>
            Represents a performance sample.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.PerformanceSample.Slot">
            <summary>
            Slot in which sample was taken at.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.PerformanceSample.NumTransactions">
            <summary>
            Number of transactions in sample.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.PerformanceSample.NumSlots">
            <summary>
            Number of slots in sample
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.PerformanceSample.SamplePeriodSecs">
            <summary>
            Number of seconds in a sample window.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.SignatureStatusInfo">
            <summary>
            Represents the signature status information.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.Slot">
            <summary>
            The slot the transaction was processed in.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.Confirmations">
            <summary>
            The number of blocks since signature confirmation.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.Error">
            <summary>
            The error if the transaction failed, null if it succeeded.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.ConfirmationStatus">
            <summary>
            The transaction's cluster confirmation status, either "processed", "confirmed" or "finalized".
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.Memo">
            <summary>
            Memo associated with the transaction, null if no memo is present.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.Signature">
            <summary>
            The transaction signature as base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignatureStatusInfo.BlockTime">
            <summary>
            Estimated production time as Unix timestamp, null if not available.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.SlotInfo">
            <summary>
            Represents the slot info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SlotInfo.Parent">
            <summary>
            The parent slot.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SlotInfo.Root">
            <summary>
            The root as set by the validator.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SlotInfo.Slot">
            <summary>
            The current slot.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.StakeActivationInfo">
            <summary>
            Represents the stake activation info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.StakeActivationInfo.Active">
            <summary>
            Stake active during the epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.StakeActivationInfo.Inactive">
            <summary>
            Stake inactive during the epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.StakeActivationInfo.State">
            <summary>
            The stake account's activation state, one of "active", "inactive", "activating", "deactivating".
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.Supply">
            <summary>
            Represents supply info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Supply.Circulating">
            <summary>
            Circulating supply in lamports.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Supply.NonCirculating">
            <summary>
            Non-circulating supply in lamports.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Supply.NonCirculatingAccounts">
            <summary>
            A list of account addresses of non-circulating accounts, as strings.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Supply.Total">
            <summary>
            Total supply in lamports.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TokenAccount">
            <summary>
            Represents a token account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccount.Account">
            <summary>
            The token account info.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TokenAccount.PublicKey">
            <summary>
            A base-58 encoded public key representing the account's public key.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.SignaturePubKeyPair">
            <summary>
            A pair corresponding of a public key and it's verifiable signature. 
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignaturePubKeyPair.PublicKey">
            <summary>
            The public key to verify the signature against.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.SignaturePubKeyPair.Signature">
            <summary>
            The signature created by the corresponding <see cref="T:Solana.Unity.Wallet.PrivateKey"/> of this pair's <see cref="P:Solana.Unity.Rpc.Models.SignaturePubKeyPair.PublicKey"/>.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.NonceInformation">
            <summary>
            Nonce information to be used to build an offline transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.NonceInformation.Nonce">
            <summary>
            The current blockhash stored in the nonce account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.NonceInformation.Instruction">
            <summary>
            An AdvanceNonceAccount instruction.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.Transaction">
            <summary>
            Represents a Transaction in Solana.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Transaction.FeePayer">
            <summary>
            The transaction's fee payer.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Transaction.Instructions">
            <summary>
            The list of <see cref="T:Solana.Unity.Rpc.Models.TransactionInstruction"/>s present in the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Transaction.RecentBlockHash">
            <summary>
            The recent block hash for the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Transaction.NonceInformation">
            <summary>
            The nonce information of the transaction.
            <remarks>
            When this is set, the <see cref="P:Solana.Unity.Rpc.Models.Transaction.NonceInformation"/>'s Nonce is used as the <c>RecentBlockhash</c>.
            </remarks>
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.Transaction.Signatures">
            <summary>
            The signatures for the transaction.
            <remarks>
            These are typically created by invoking the <c>Build(IList{Account} signers)</c> method of the <see cref="T:Solana.Unity.Rpc.Builders.TransactionBuilder"/>,
            but can be created by deserializing a Transaction and adding signatures manually.
            </remarks>
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.CompileMessage">
            <summary>
            Compile the transaction data.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.VerifySignatures(System.Byte[])">
            <summary>
            Verifies the signatures a given serialized message.
            </summary>
            <returns>true if they are valid, false otherwise.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.VerifySignatures">
            <summary>
            Verifies the signatures of a complete and signed transaction.
            </summary>
            <returns>true if they are valid, false otherwise.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Sign(System.Collections.Generic.IList{Solana.Unity.Wallet.Account})">
            <summary>
            Sign the transaction with the specified signers. Multiple signatures may be applied to a transaction.
            The first signature is considered primary and is used to identify and confirm transaction.
            <remarks>
            <para>
            If the transaction <c>FeePayer</c> is not set, the first signer will be used as the transaction fee payer account.
            </para>
            <para>
            Transaction fields SHOULD NOT be modified after the first call to <c>Sign</c> or an externally created signature
            has been added to the transaction object, doing so will invalidate the signature and cause the transaction to be
            rejected by the cluster.
            </para>
            <para>
            The transaction must have been assigned a valid <c>RecentBlockHash</c> or <c>NonceInformation</c> before invoking this method.
            </para>
            </remarks>
            </summary>
            <param name="signers">The signer accounts.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Sign(Solana.Unity.Wallet.Account)">
            <summary>
            Sign the transaction with the specified signer. Multiple signatures may be applied to a transaction.
            The first signature is considered primary and is used to identify and confirm transaction.
            <remarks>
            <para>
            If the transaction <c>FeePayer</c> is not set, the first signer will be used as the transaction fee payer account.
            </para>
            <para>
            Transaction fields SHOULD NOT be modified after the first call to <c>Sign</c> or an externally created signature
            has been added to the transaction object, doing so will invalidate the signature and cause the transaction to be
            rejected by the cluster.
            </para>
            <para>
            The transaction must have been assigned a valid <c>RecentBlockHash</c> or <c>NonceInformation</c> before invoking this method.
            </para>
            </remarks>
            </summary>
            <param name="signer">The signer account.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.PartialSign(System.Collections.Generic.IList{Solana.Unity.Wallet.Account})">
            <summary>
            Partially sign a transaction with the specified accounts.
            All accounts must correspond to either the fee payer or a signer account in the transaction instructions.
            </summary>
            <param name="signers">The signer accounts.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.DeduplicateSigners(System.Collections.Generic.IEnumerable{Solana.Unity.Wallet.Account})">
            <summary>
            Deduplicate the list of given signers.
            </summary>
            <param name="signers">The signer accounts.</param>
            <returns>The signer accounts with removed duplicates</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.PartialSign(Solana.Unity.Wallet.Account)">
            <summary>
            Partially sign a transaction with the specified account.
            The account must correspond to either the fee payer or a signer account in the transaction instructions.
            </summary>
            <param name="signer">The signer account.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Build(Solana.Unity.Wallet.Account)">
            <summary>
            Signs the transaction's message with the passed signer and add it to the transaction, serializing it.
            </summary>
            <param name="signer">The signer.</param>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Build(System.Collections.Generic.IList{Solana.Unity.Wallet.Account})">
            <summary>
            Signs the transaction's message with the passed list of signers and adds them to the transaction, serializing it.
            </summary>
            <param name="signers">The list of signers.</param>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.AddSignature(Solana.Unity.Wallet.PublicKey,System.Byte[])">
            <summary>
            Adds an externally created signature to the transaction.
            The public key must correspond to either the fee payer or a signer account in the transaction instructions.
            </summary>
            <param name="publicKey">The public key of the account that signed the transaction.</param>
            <param name="signature">The transaction signature.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Add(System.Collections.Generic.IEnumerable{Solana.Unity.Rpc.Models.TransactionInstruction})">
            <summary>
            Adds one or more instructions to the transaction.
            </summary>
            <param name="instructions">The instructions to add.</param>
            <returns>The transaction instance.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Add(Solana.Unity.Rpc.Models.TransactionInstruction)">
            <summary>
            Adds an instruction to the transaction.
            </summary>
            <param name="instruction">The instruction to add.</param>
            <returns>The transaction instance.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Serialize">
            <summary>
            Serializes the transaction into wire format.
            </summary>
            <returns>The transaction encoded in wire format.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Populate(Solana.Unity.Rpc.Models.Message,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Populate the Transaction from the given message and signatures.
            </summary>
            <param name="message">The <see cref="T:Solana.Unity.Rpc.Models.Message"/> object.</param>
            <param name="signatures">The list of signatures.</param>
            <returns>The Transaction object.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Populate(System.String,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Populate the Transaction from the given compiled message and signatures.
            </summary>
            <param name="message">The compiled message, as base-64 encoded string.</param>
            <param name="signatures">The list of signatures.</param>
            <returns>The Transaction object.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize a wire format transaction into a Transaction object.
            </summary>
            <param name="data">The data to deserialize into the Transaction object.</param>
            <returns>The Transaction object.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.Transaction.Deserialize(System.String)">
            <summary>
            Deserialize a transaction encoded as base-64 into a Transaction object.
            </summary>
            <param name="data">The data to deserialize into the Transaction object.</param>
            <returns>The Transaction object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the given string is null.</exception>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionError">
            <summary>
            Represents a Transaction Error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionError.Type">
            <summary>
            The type of transaction error.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionError.InstructionError">
            <summary>
            The inner instruction error, if the <c>Type</c> is <c>TransactionErrorType.InstructionError</c>.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionErrorType">
            <summary>
            The possible types of Transaction errors.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.AccountInUse">
            <summary>
            An account is already being processed in another transaction in a way
            that does not support parallelism
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.AccountLoadedTwice">
            <summary>
            A `Pubkey` appears twice in the transaction's `account_keys`.  Instructions can reference
            `Pubkey`s more than once but the message must contain a list with no duplicate keys
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.AccountNotFound">
            <summary>
            Attempt to debit an account but found no record of a prior credit.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.ProgramAccountNotFound">
            <summary>
            Attempt to load a program that does not exist
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.InsufficientFundsForFee">
            <summary>
            The from `Pubkey` does not have sufficient balance to pay the fee to schedule the transaction
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.InvalidAccountForFee">
            <summary>
            This account may not be used to pay transaction fees
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.AlreadyProcessed">
            <summary>
            The bank has seen this transaction before. This can occur under normal operation
            when a UDP packet is duplicated, as a user error from a client not updating
            its `recent_blockhash`, or as a double-spend attack.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.BlockhashNotFound">
            <summary>
            The bank has not seen the given `recent_blockhash` or the transaction is too old and
            the `recent_blockhash` has been discarded.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.InstructionError">
            <summary>
            An error occurred while processing an instruction.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.CallChainTooDeep">
            <summary>
             Loader call chain is too deep
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.MissingSignatureForFee">
            <summary>
            Transaction requires a fee but has no signature present
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.InvalidAccountIndex">
            <summary>
            Transaction contains an invalid account reference
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.SignatureFailure">
            <summary>
            Transaction did not pass signature verification
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.InvalidProgramForExecution">
            <summary>
            This program may not be used for executing instructions
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.SanitizeFailure">
            <summary>
            Transaction failed to sanitize accounts offsets correctly
            implies that account locks are not taken for this TX, and should
            not be unlocked.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.ClusterMaintenance">
            <summary>
            Transactions are currently disabled due to cluster maintenance
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.TransactionErrorType.AccountBorrowOutstanding">
            <summary>
            Transaction processing left an account with an outstanding borrowed reference
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.TransactionInstruction">
            <summary>
            Represents a transaction instruction before being compiled into the transaction's message.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionInstruction.ProgramId">
            <summary>
            The program ID associated with the instruction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionInstruction.Keys">
            <summary>
            The keys associated with the instruction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.TransactionInstruction.Data">
            <summary>
            The instruction-specific data.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.CompiledInstruction">
            <summary>
            A compiled instruction within the transaction's message.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.CompiledInstruction.Layout">
            <summary>
            Represents the layout of the <see cref="T:Solana.Unity.Rpc.Models.CompiledInstruction"/> encoded values.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Models.CompiledInstruction.Layout.ProgramIdIndexOffset">
            <summary>
            The offset at which the program's id index value begins.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.CompiledInstruction.ProgramIdIndex">
            <summary>
            The index of the program's key in the transaction's account keys.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.CompiledInstruction.KeyIndicesCount">
            <summary>
            The <see cref="T:Solana.Unity.Rpc.Utilities.ShortVectorEncoding"/> encoded length representing the number of key indices.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.CompiledInstruction.KeyIndices">
            <summary>
            The indices of the account keys for the instruction as they appear in the transaction.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.CompiledInstruction.DataLength">
            <summary>
            The <see cref="T:Solana.Unity.Rpc.Utilities.ShortVectorEncoding"/> encoded length representing the number of key indices.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.CompiledInstruction.Data">
            <summary>
            The instruction data.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.CompiledInstruction.Length">
            <summary>
            Get the length of the compiled instruction.
            </summary>
            <returns>The length.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Models.CompiledInstruction.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Attempts to deserialize a compiled instruction from the given data.
            </summary>
            <param name="data">The data to deserialize.</param>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.NodeVersion">
            <summary>
            Represents the current solana versions running on the node.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.NodeVersion.SolanaCore">
            <summary>
            Software version of solana-core.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.NodeVersion.FeatureSet">
            <summary>
            unique identifier of the current software's feature set.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.VoteAccount">
            <summary>
            Represents the account info and associated stake for all the voting accounts in the current bank.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.RootSlot">
            <summary>
            The root slot for this vote account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.VotePublicKey">
            <summary>
            The vote account address, as a base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.NodePublicKey">
            <summary>
            The validator identity, as a base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.ActivatedStake">
            <summary>
            The stake, in lamports, delegated to this vote account and active in this epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.EpochVoteAccount">
            <summary>
            Whether the vote account is staked for this epoch.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.Commission">
            <summary>
            Percentage of rewards payout owed to the vote account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.LastVote">
            <summary>
            Most recent slot voted on by this vote account.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccount.EpochCredits">
            <summary>
            History of how many credits earned by the end of the each epoch.
            <remarks>
            Each array contains [epoch, credits, previousCredits];
            </remarks>
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Models.VoteAccounts">
            <summary>
            Represents the vote accounts.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccounts.Current">
            <summary>
            Current vote accounts.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Models.VoteAccounts.Delinquent">
            <summary>
            Delinquent vote accounts.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.SolanaRpcBatchComposer">
            <summary>
            This object allows a caller to compose a batch of RPC requests for batch submission
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchComposer._rpcClient">
            <summary>
            The `IRpcClient` instance to use
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchComposer._reqs">
            <summary>
            Batch of requests and their handlers
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchComposer._jsonOptions">
            <summary>
            JSON serializer options
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.SolanaRpcBatchComposer.Count">
            <summary>
            How many requests are in this batch
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchComposer._autoMode">
            <summary>
            Holds the auto execution mode.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchComposer._autoBatchSize">
            <summary>
            Holds the batch size threshold for the auto batch execution mode.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.#ctor(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Constructs a new SolanaRpcBatchComposer instance
            </summary>
            <param name="rpcClient">An RPC client</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.AutoExecute(Solana.Unity.Rpc.Types.BatchAutoExecuteMode,System.Int32)">
            <summary>
            Sets the auto execute mode and trigger threshold
            </summary>
            <param name="mode">The auto execute mode to use.</param>
            <param name="batchSizeTrigger">The number of requests that will trigger a batch execution.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.CreateJsonRequests">
            <summary>
            Returns a batch of JSON RPC requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.Execute">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will invoke callbacks with an exception.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.Execute(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will invoke callbacks with an exception.
            </summary>
            <param name="client">The RPC client to execute this batch with</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteAsync">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will invoke callbacks with an exception.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteAsync(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will invoke callbacks with an exception.
            </summary>
            <param name="client">The RPC client to execute this batch with</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteWithFatalFailure">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will throw an Exception and bypass callbacks.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteWithFatalFailure(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will throw an Exception and bypass callbacks.
            </summary>
            <param name="client">The RPC client to execute this batch with</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteWithFatalFailureAsync">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will throw an Exception and bypass callbacks.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ExecuteWithFatalFailureAsync(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Execute a batch request and process the response into the expected native types.
            Batch failure execption will throw an Exception and bypass callbacks.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ProcessBatchResponse(Solana.Unity.Rpc.Core.Http.RequestResult{Solana.Unity.Rpc.Messages.JsonRpcBatchResponse})">
            <summary>
            Handles the conversion of the generic JSON deserialized response objects to the native types.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.ProcessBatchFailure(Solana.Unity.Rpc.Core.Http.RequestResult{Solana.Unity.Rpc.Messages.JsonRpcBatchResponse})">
            <summary>
            Process a failed batch response by notifying all callbacks with the exception
            </summary>
            <param name="response">The failed batch RPC response</param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.MapJsonTypeToNativeType(System.Object,System.Type)">
            <summary>
            Convert a possible JsonElement type into desired response native type.
            </summary>
            <param name="input"></param>
            <param name="nativeType"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.Clear">
            <summary>
            Clears the internal list of requests
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchComposer.Flush">
            <summary>
            Executes any batch using the auto execution mode (if set) or throws an execption.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.RpcBatchReqRespItem">
            <summary>
            Encapsulates the request, the expected return type and will handle the response callback/task/delegate.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.RpcBatchReqRespItem.Create``1(System.Int32,System.String,System.Collections.Generic.IList{System.Object},System.Action{Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem,System.Exception})">
            <summary>
            Create an RpcBatchReqRespItem instance ready for execution.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.RpcBatchReqRespItem.#ctor(Solana.Unity.Rpc.Messages.JsonRpcRequest,System.Type,System.Action{Solana.Unity.Rpc.Messages.JsonRpcBatchResponseItem,System.Exception})">
            <summary>
            Construct a RpcBatchReqRespItem instance.
            </summary>
            <param name="req"></param>
            <param name="resultType"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks">
            <summary>
            This object is used to create a batch of RPC requests that can be executed as a single call to the RPC endpoint.
            Use of batches can have give a significant performance improvement instead of making multiple requests.
            The execution of batches can be controlled manually via the Flush method, or can be invoked automatically using auto-execute mode.
            Auto-execute mode is useful when iterating through large worksets.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.#ctor(Solana.Unity.Rpc.IRpcClient)">
            <summary>
            Constructs a new SolanaRpcBatchWithCallbacks instance
            </summary>
            <param name="rpcClient">An RPC client</param>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks._composer">
            <summary>
            A batch composer instance
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.Composer">
            <summary>
            How many requests are in this batch
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.AutoExecute(Solana.Unity.Rpc.Types.BatchAutoExecuteMode,System.Int32)">
            <summary>
            Sets the auto execute mode and trigger threshold
            </summary>
            <param name="mode">The auto execute mode to use.</param>
            <param name="batchSizeTrigger">The number of requests that will trigger a batch execution.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.Flush">
            <summary>
            Used to execute any requests remaining in the batch.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetBalance(System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{System.UInt64},System.Exception})">
            <summary>
            Gets the balance for a certain public key.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetTokenAccountsByOwner(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{System.Collections.Generic.List{Solana.Unity.Rpc.Models.TokenAccount}},System.Exception})">
            <summary>
            Gets all SPL Token accounts by token owner.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{System.Collections.Generic.List{Solana.Unity.Rpc.Models.SignatureStatusInfo},System.Exception})">
            <summary>
            Gets signatures with the given commitment for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetConfirmedSignaturesForAddress2(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{System.Collections.Generic.List{Solana.Unity.Rpc.Models.SignatureStatusInfo},System.Exception})">
            <summary>
            Gets confirmed signatures for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetProgramAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp},System.Action{System.Collections.Generic.List{Solana.Unity.Rpc.Models.AccountKeyPair},System.Exception})">
            <summary>
            Returns all accounts owned by the provided program Pubkey.
            <remarks>Accounts must meet all filter criteria to be included in the results.</remarks>
            </summary>
            <param name="pubKey">The program public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="dataSize">The data size of the account to compare against the program account data.</param>
            <param name="memCmpList">The list of comparisons to match against the program account data.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetTransaction(System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Models.TransactionMetaSlotInfo,System.Exception})">
            <summary>
            Returns transaction details for a confirmed transaction.
            <remarks>
            <para>
            The <c>commitment</c> parameter is optional, <see cref="F:Solana.Unity.Rpc.Types.Commitment.Processed"/> is not supported,
            the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </para>
            </remarks>
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo},System.Exception})">
            <summary>
            Gets the account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="encoding">The encoding of the account data.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetTokenLargestAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{System.Collections.Generic.List{Solana.Unity.Rpc.Models.LargeTokenAccount}},System.Exception})">
            <summary>
            Gets the 20 largest token accounts of a particular SPL Token.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.SendTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Action{System.String,System.Exception})">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as byte array.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preflightCommitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.SendTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Action{System.String,System.Exception})">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as base-64 encoded string.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preflightCommitment">The block commitment used for preflight.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{System.Collections.Generic.List{Solana.Unity.Rpc.Models.AccountInfo}},System.Exception})">
            <summary>
            Gets the account info for multiple accounts.
            </summary>
            <param name="accounts">The list of the accounts public keys.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcBatchWithCallbacks.GetTokenAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment,System.Action{Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo},System.Exception})">
            <summary>
            Gets the token account info.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solana.Unity.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The token account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <param name="callback">The callback to handle the result.</param>
        </member>
        <member name="T:Solana.Unity.Rpc.SolanaRpcClient">
            <summary>
            Implements functionality to interact with the Solana JSON RPC API.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaRpcClient._idGenerator">
            <summary>
            Message Id generator.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.#ctor(System.String,System.Object,System.Net.Http.HttpClient,Solana.Unity.Rpc.Utilities.IRateLimiter)">
            <summary>
            Initialize the Rpc Client with the passed url.
            </summary>
            <param name="url">The url of the node exposing the JSON RPC API.</param>
            <param name="logger">The logger to use.</param>
            <param name="httpClient">An http client.</param>
            <param name="rateLimiter">A rate limiting strategy or null.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.BuildRequest``1(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Build the request for the passed RPC method and parameters.
            </summary>
            <param name="method">The request's RPC method.</param>
            <param name="parameters">A list of parameters to include in the request.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendRequestAsync``1(System.String)">
            <summary>
            
            </summary>
            <param name="method">The request's RPC method.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendRequestAsync``1(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Send a request asynchronously.
            </summary>
            <param name="method">The request's RPC method.</param>
            <param name="parameters">A list of parameters to include in the request.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenMintInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenMintInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenMintInfo(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenMintInfo(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetAccountInfoAsync(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetAccountInfo(System.String,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.BinaryEncoding)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetProgramAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetProgramAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetProgramAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetProgramAccounts(System.String,Solana.Unity.Rpc.Types.Commitment,System.Nullable{System.Int32},System.Collections.Generic.IList{Solana.Unity.Rpc.Models.MemCmp})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBalance(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBalance(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlockAsync(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlock(System.UInt64,Solana.Unity.Rpc.Types.Commitment,Solana.Unity.Rpc.Types.TransactionDetailsFilterType,System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocks(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedBlocksWithLimit(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFirstAvailableBlock">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFirstAvailableBlock"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFirstAvailableBlockAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFirstAvailableBlock"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetHealth">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetHealth"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetHealthAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetHealthAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedTransactionAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedTransaction(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockHeightAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockHeightAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockHeight(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockHeight(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockCommitmentAsync(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockCommitmentAsync(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockCommitment(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockCommitment(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockTimeAsync(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockTimeAsync(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetBlockTime(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetBlockTime(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetClusterNodesAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetClusterNodesAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetClusterNodes">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetClusterNodes"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetEpochInfoAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetEpochInfoAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetEpochInfo(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetEpochInfo(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetEpochScheduleAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetEpochScheduleAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetEpochSchedule">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetEpochSchedule"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFeeCalculatorForBlockhash(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFeeCalculatorForBlockhash(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFeeRateGovernorAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFeeRateGovernorAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFeeRateGovernor">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFeeRateGovernor"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFeesAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFeesAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetFees(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetFees(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetRecentBlockHashAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetRecentBlockHashAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetRecentBlockHash(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetRecentBlockHash(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMaxRetransmitSlotAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMaxRetransmitSlotAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMaxRetransmitSlot">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMaxRetransmitSlot"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMaxShredInsertSlotAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMaxShredInsertSlotAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMaxShredInsertSlot">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMaxShredInsertSlot"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetGenesisHashAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetGenesisHashAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetGenesisHash">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetGenesisHash"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetIdentityAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetIdentityAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetIdentity">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetIdentity"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationGovernorAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationGovernorAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationGovernor(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationGovernor(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationRateAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationRateAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationRate">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationRate"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetLargestAccountsAsync(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetLargestAccountsAsync(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetLargestAccounts(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetLargestAccounts(System.Nullable{Solana.Unity.Rpc.Types.AccountFilterType},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSnapshotSlotAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSnapshotSlotAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSnapshotSlot">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSnapshotSlot"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetRecentPerformanceSamples(System.UInt64)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetRecentPerformanceSamples(System.UInt64)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedSignaturesForAddress2Async(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedSignaturesForAddress2Async(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetConfirmedSignaturesForAddress2(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetConfirmedSignaturesForAddress2(System.String,System.UInt64,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlotAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlotAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlot(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlot(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlotLeaderAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeaderAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlotLeader(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeader(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetStakeActivation(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetStakeActivation(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSupplyAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSupplyAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetSupply(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetSupply(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountBalanceAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountBalance(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountBalance(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenLargestAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenLargestAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenLargestAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenLargestAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenSupplyAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenSupplyAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTokenSupply(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTokenSupply(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTransactionCountAsync(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTransactionCountAsync(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetTransactionCount(Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetTransactionCount(Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetVersionAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetVersionAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetVersion">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetVersion"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetVoteAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetVoteAccountsAsync(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetVoteAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetVoteAccounts(System.String,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMinimumLedgerSlotAsync">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMinimumLedgerSlotAsync"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.GetMinimumLedgerSlot">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.GetMinimumLedgerSlot"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.RequestAirdrop(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.RequestAirdrop(System.String,System.UInt64,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SendTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SendTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SendTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SimulateTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SimulateTransaction(System.String,System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solana.Unity.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaRpcClient.Solana#Unity#Rpc#IRpcClient#GetNextIdForReq">
            <summary>
            Gets the id for the next request.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.SolanaStreamingRpcClient">
            <summary>
            Implementation of the Solana streaming RPC API abstraction client.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaStreamingRpcClient._idGenerator">
            <summary>
            Message Id generator.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaStreamingRpcClient.unconfirmedRequests">
            <summary>
            Maps the internal ids to the unconfirmed subscription state objects.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.SolanaStreamingRpcClient.confirmedSubscriptions">
            <summary>
            Maps the server ids to the confirmed subscription state objects.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.#ctor(System.String,System.Object,Solana.Unity.Rpc.Core.Sockets.IWebSocket,System.Net.WebSockets.ClientWebSocket)">
            <summary>
            Internal constructor.
            </summary>
            <param name="url">The url of the server to connect to.</param>
            <param name="logger">The possible ILogger instance.</param>
            <param name="websocket">The possible IWebSocket instance.</param>
            <param name="clientWebSocket">The possible ClientWebSocket instance.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.CleanupSubscriptions">
            <inheritdoc cref="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.CleanupSubscriptions"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})">
            <inheritdoc cref="M:Solana.Unity.Rpc.Core.Sockets.StreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.HandleError(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Handles and finishes parsing the contents of an error message.
            </summary>
            <param name="jToken">The jtoken that read the message so far.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.RemoveUnconfirmedSubscription(System.Int32)">
            <summary>
            Removes an unconfirmed subscription.
            </summary>
            <param name="id">The subscription id.</param>
            <returns>Returns the subscription object if it was found.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.RemoveSubscription(System.Int32,System.Boolean)">
            <summary>
            Removes a given subscription object from the map and notifies the object of the unsubscription.
            </summary>
            <param name="id">The subscription id.</param>
            <param name="shouldNotify">Whether or not to notify that the subscription was removed.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.ConfirmSubscription(System.Int32,System.Int32)">
            <summary>
            Confirms a given subcription based on the internal subscription id and the newly received external id.
            Moves the subcription state object from the unconfirmed map to the confirmed map.
            </summary>
            <param name="internalId"></param>
            <param name="resultId"></param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.AddSubscription(Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32)">
            <summary>
            Adds a new subscription state object into the unconfirmed subscriptions map.
            </summary>
            <param name="subscription">The subcription to add.</param>
            <param name="internalId">The internally generated id of the subscription.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.RetrieveSubscription(System.Int32)">
            <summary>
            Safely retrieves a subscription state object from a given subscription id.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
            <returns>The subscription state object.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.HandleDataMessage(Newtonsoft.Json.Linq.JToken,System.String,System.Int32)">
            <summary>
            Handles a notification message and finishes parsing the contents.
            </summary>
            <param name="jToken">The current JToken being used to parse the message.</param>
            <param name="method">The method parameter already parsed within the message.</param>
            <param name="subscriptionId">The subscriptionId for this message.</param>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeTokenAccountAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeTokenAccountAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeTokenAccount(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeTokenAccount(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.TokenAccountInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeLogInfoAsync(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeLogInfo(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeLogInfo(Solana.Unity.Rpc.Types.LogsSubscriptionType,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.LogInfo}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.ErrorResult}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.ResponseValue{Solana.Unity.Rpc.Models.AccountKeyPair}},Solana.Unity.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeSlotInfo(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeSlotInfo(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Models.SlotInfo})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeRootAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeRootAsync(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.SubscribeRoot(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.SubscribeRoot(System.Action{Solana.Unity.Rpc.Core.Sockets.SubscriptionState,System.Int32})"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.Subscribe(Solana.Unity.Rpc.Core.Sockets.SubscriptionState,Solana.Unity.Rpc.Messages.JsonRpcRequest)">
            <summary>
            Internal subscribe function, finishes the serialization and sends the message payload.
            </summary>
            <param name="sub">The subscription state object.</param>
            <param name="msg">The message to be serialized and sent.</param>
            <returns>A task representing the state of the asynchronous operation-</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.UnsubscribeAsync(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.UnsubscribeAsync(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.Unsubscribe(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)">
            <inheritdoc cref="M:Solana.Unity.Rpc.IStreamingRpcClient.Unsubscribe(Solana.Unity.Rpc.Core.Sockets.SubscriptionState)"/>
        </member>
        <member name="M:Solana.Unity.Rpc.SolanaStreamingRpcClient.CloneObject``1(``0)">
            <summary>
            Clones a object via shallow copy
            </summary>
            <typeparam name="T">Object Type to Clone</typeparam>
            <param name="obj">Object to Clone</param>
            <returns>New Object reference</returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.AccountFilterType">
            <summary>
            Represents the filter account type.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.AccountFilterType.Circulating">
            <summary>
            Circulating accounts.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.AccountFilterType.NonCirculating">
            <summary>
            Non circulating accounts.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.BatchAutoExecuteMode">
            <summary>
            Represents the different auto execute modes for an `SolanaRpcBatchComposer`
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BatchAutoExecuteMode.Manual">
            <summary>
            No auto execution.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BatchAutoExecuteMode.ExecuteWithFatalFailure">
            <summary>
            Execute with RPC batch failure throwing an Exception.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BatchAutoExecuteMode.ExecuteWithCallbackFailures">
            <summary>
            Execute with RPC batch failures execptions routed into callbacks.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.BatchRequestException">
            <summary>
            Encapsulates the batch request failure that is relayed to all callbacks
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BatchRequestException.RpcResult">
            <summary>
            The RPC result that failed
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Types.BatchRequestException.#ctor(Solana.Unity.Rpc.Core.Http.RequestResult{Solana.Unity.Rpc.Messages.JsonRpcBatchResponse})">
            <summary>
            Contructs a BatchRequestException based on the JsonRpcBatchResponse result.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.BinaryEncoding">
            <summary>
            The encodings used for binary data to interact with the Solana nodes.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BinaryEncoding.JsonParsed">
            <summary>
            Request json parsed data, when a parser is available.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BinaryEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.BinaryEncoding.Base64Zstd">
            <summary>
            Base64+Zstd encoding.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.Commitment">
            <summary>
            The commitment describes how finalized a block is at that point in time.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.Commitment.Finalized">
            <summary>
            The node will query the most recent block confirmed by supermajority of the cluster as having reached maximum lockout, meaning the cluster has recognized this block as finalized.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.Commitment.Confirmed">
            <summary>
            The node will query the most recent block that has been voted on by supermajority of the cluster.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.Commitment.Processed">
            <summary>
            The node will query its most recent block. Note that the block may not be complete.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.IConnectionStatistics">
            <summary>
            Contains several statistics regarding connection speed and dat usage.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Types.IConnectionStatistics.AverageThroughput10Seconds">
            <summary>
            Average throughput in the last 10s. Measured in bytes/s.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Types.IConnectionStatistics.AverageThroughput60Seconds">
            <summary>
            Average throughput in the last minute. Measured in bytes/s.
            </summary>
        </member>
        <member name="P:Solana.Unity.Rpc.Types.IConnectionStatistics.TotalReceivedBytes">
            <summary>
            Total bytes downloaded.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.LogsSubscriptionType">
            <summary>
            Enum with the possible vote selection parameter for the log subscription method.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.LogsSubscriptionType.All">
            <summary>
            Subscribes to All logs.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.LogsSubscriptionType.AllWithVotes">
            <summary>
            Subscribes to All logs including votes.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.TransactionDetails">
            <summary>
            Used to specify which block data to retrieve.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetails.Full">
            <summary>
            Retrieve the full block data.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetails.Signatures">
            <summary>
            Retrieve only signatures, leaving out detailed transaction data.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetails.None">
            <summary>
            Retrieve only basic block data.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Types.TransactionDetailsFilterType">
            <summary>
            Represents the filter type for block data.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.None">
            <summary>
            Returns no transaction details.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Signatures">
            <summary>
            Returns only transaction signatures.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Types.TransactionDetailsFilterType.Full">
            <summary>
            Returns full transaction details.
            </summary>
        </member>
        <member name="T:Solana.Unity.Rpc.Utilities.IRateLimiter">
            <summary>
            Provides rate limiting behaviour for RPC interactions.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.IRateLimiter.Fire">
            <summary>
            Fire or block until we can fire.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.IRateLimiter.CanFire">
            <summary>
            Would a fire method succeed?
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Utilities.RateLimiter">
            <summary>
            A primitive blocking sliding time window rate limiter. Not thread-safe.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a simple rate-limit tracking instance.
            This allows a number of hits within a window of duration_ms. 
            </summary>
            <param name="hits">Number of allowed hits</param>
            <param name="duration_ms">Duration of timespan in miliseconds</param>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.Create">
            <summary>
            Create a simple rate-limit tracking instance.
            Configure using `PerSeconds` and `AllowHits` 
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.CanFire">
            <summary>
            Would a fire request be allowed without delay?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.Fire">
            <summary>
            Pre-fire check - this will block if fire rates exceed defined limits until valid.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.NextFireAllowed(System.DateTime)">
            <summary>
            When is a next fire allowed?
            </summary>
            <param name="checkTime"></param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.PerSeconds(System.Int32)">
            <summary>
            Modify a rate limit
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.PerMs(System.Int32)">
            <summary>
            Modify a rate limit
            </summary>
            <param name="ms">Number of milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.AllowHits(System.Int32)">
            <summary>
            Create a new RateLimiter instance setting the number of hits.
            </summary>
            <param name="hits">Number of hits allowed per sliding time window.</param>
            <returns>An instance of the rate limiter with a sliding time window.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.RateLimiter.ToString">
            <summary>
            Show info about this rate limiter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solana.Unity.Rpc.Utilities.ShortVectorEncoding">
            <summary>
            Implements the short vector encoding used in Solana transaction <see cref="T:Solana.Unity.Rpc.Models.Message"/>s.
            </summary>
        </member>
        <member name="F:Solana.Unity.Rpc.Utilities.ShortVectorEncoding.SpanLength">
            <summary>
            The length of the compact-u16 multi-byte encoding.
            </summary>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.ShortVectorEncoding.EncodeLength(System.Int32)">
            <summary>
            Encodes the number of account keys present in the transaction as a short vector, see remarks.
            <remarks>
            See the documentation for more information on this encoding:
            https://docs.solana.com/developing/programming-model/transactions#compact-array-format
            </remarks>
            </summary>
            <param name="len">The number of account keys present in the transaction.</param>
            <returns>The short vector encoded data.</returns>
        </member>
        <member name="M:Solana.Unity.Rpc.Utilities.ShortVectorEncoding.DecodeLength(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes the number of account keys present in the transaction following a specific format.
            <remarks>
            See the documentation for more information on this encoding:
            https://docs.solana.com/developing/programming-model/transactions#compact-array-format
            </remarks>
            </summary>
            <param name="data">The short vector encoded data.</param>
            <returns>The number of account keys present in the transaction.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
